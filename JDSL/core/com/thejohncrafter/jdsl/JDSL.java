package com.thejohncrafter.jdsl;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;

import com.thejohncrafter.jdsl.commands.AddStandardCMD;

/**
 * Cette classe contient les méthodes principales de JDSL.<br>
 * <br>
 * Thic class contains the main JDSL's methods.
 * 
 * @author thejohncrafter
 *
 */
public class JDSL {
	
	//TODO : créer un site web via bootstrap (getbootstrep.com)
	
	/**
	 * Ce <code>PrintStream</code> est utilisé pour les logs du moteur de script.<br>
	 * <br>
	 * This <code>PrintStream</code> is used for script engine's logs.
	 */
	public static PrintStream out = System.out;
	
	public static void main(String[] args) throws JDSLException{
		
		load("test");
		execute("test.jdsl", "test");
		deleteThreadContent("test");
		
	}
	
	/**
	 * Cette méthode charge les commandes du DSL dans CommandsList.<br>
	 * <br>
	 * This method loads all the DSL's commands in CommandsList.<br>
	 * @param uniqueID L'ID unique qui sera associé à l'executeur à lancer.<br>
	 * <br>
	 * The unique ID that will be given to the executer to launch.
	 * @throws JDSLException Si une erreur se produit.<br>
	 * <br>
	 * If an error occurates.
	 * @see JDSLException
	 */
	public static void load(String uniqueID) throws JDSLException{
		
		writeLoader();
		
		CommandsList.putCommand("addStdCMD", new AddStandardCMD());
		
		JDSL.out.println("loading standard library");
		execute("stdlib_loader.jdsl", uniqueID);
		
	}
	
	/**
	 * Cette méthode écrit le fichier stdlib_loader.jdsl.<br>
	 * <br>
	 * This method writes the file stdlib_loader.jdsl.
	 * @throws JDSLException Si une erreur d'entrés-sortie se produit.<br>
	 * <br>
	 * If an IO error occurates.
	 */
	private static void writeLoader() throws JDSLException{
		
		String version = "1.2";
		
		File loader = new File("stdlib_loader.jdsl");
		
		JDSL.out.println("checking for version");
		
		try {
			
			BufferedReader in = new BufferedReader(new FileReader(loader));
			
			String currVersion = in.readLine().substring(16);
			in.close();
			
			if(currVersion.equals(version)){
				
				JDSL.out.println("this is right version");
				return;
				
			}
			
		} catch (FileNotFoundException e) {} catch (IOException e) {
			
			throw new JDSLException(e);
			
		}
		
		loader.delete();
		
		JDSL.out.println("writing stdlib_loader.jdsl");
		
		try {
			
			BufferedWriter bw = new BufferedWriter(new FileWriter(loader, true));
			
			bw.write("// JDSL version " + version +  "\n" +
				"// Ce fichier est généré automatiquement. MERCI DE NE PAS LE MODIFIER.\n" +
				"// This file is automatically generated. DO NOT EDIT IT.\n" +
				"\n" +
				"// un dsl nommé \"loader.jdsl\" doit être placé dans le répertoire principal\n" +
				"// du programme pour monter en les commandes en mémoire.\n" +
				"// a dsl named \"loader.jdsl\" must be placed in programs root repertory\n" +
				"// to load commands.\n" +
				"\n" +
				"addStdCMD com.thejohncrafter.jdsl.commands.AddVar addvar\n" +
				"addvar CMD_CLASSPATH com.thejohncrafter.jdsl.commands\n" +
				"\n" +
				"// chargement des commandes principales...\n" +
				"// loading main commands...\n" +
				"addStdCMD %CMD_CLASSPATH%.RemoveVar          rmvar\n" +
				"addStdCMD %CMD_CLASSPATH%.Exe                exe\n" +
				"addStdCMD %CMD_CLASSPATH%.Sleep              sleep\n" +
				"addStdCMD %CMD_CLASSPATH%.Goto               goto\n" +
				"addStdCMD %CMD_CLASSPATH%.SetProperty        setProp\n" +
				"addStdCMD %CMD_CLASSPATH%.AddCMD             addCMD\n" +
				"addStdCMD %CMD_CLASSPATH%.AddStandardMethod  addStdMethod\n" +
				"addStdCMD %CMD_CLASSPATH%.AddMethod          addMethod\n" +
				"addStdCMD %CMD_CLASSPATH%.Echo               echo\n" +
				"\n" +
				"addvar CSTRUCT_CLASSPATH com.thejohncrafter.jdsl.control_structures\n" +
				"\n" +
				"addStdCMD %CSTRUCT_CLASSPATH%.If            if\n" +
				"\n" +
				"addvar METHODS_CLASSPATH com.thejohncrafter.jdsl.methods\n" +
				"\n" +
				"addStdMethod %METHODS_CLASSPATH%.LogicEquals    equals\n" +
				"addStdMethod %METHODS_CLASSPATH%.LogicDifferent diff\n" +
				"addStdMethod %METHODS_CLASSPATH%.LogicInferior  inf\n" +
				"addStdMethod %METHODS_CLASSPATH%.LogicSuperior  sup\n" +
				"addStdMethod %METHODS_CLASSPATH%.GetProperty    getProp\n" +
				"\n" +
				"if (equals (getProp importJObject) true)\n" +
				"  \n" +
				"  // ajouter les imports de JObject\n" +
				"  // add JObject imports\n" +
				"  \n" +
				"end\n" +
				"\n" +
				"// execution du DSL loader.jdsl. Si le fichier est introuvable, l'action est annulée.\n" +
				"// running DSL loader.jdsl. If file is unreachable, command is canceled.\n" +
				"exe loader.jdsl true\n");
			
			bw.close();
			
		} catch (IOException e) {
			
			System.out.println("error when trying to write file stdlib_loader.jdsl :");
			e.printStackTrace();
			throw new JDSLException("error when trying to write file stdlib_loader.jdsl", e);
			
		}
		
	}
	
	/**
	 * Cette méthode execute le fichier DSL correspondant au chemin d'accés donné.<br>
	 * <br>
	 * This method runs the file matching to the given classpath.
	 * @param dsl Le dsl à exécuter.<br>
	 * <br>
	 * The DSL to run.
	 * @param uniqueID Un ID unique (n'importe le quel) qui permet d'identifier 
	 * le <code>CommandsExecuter</code> créé.<br>
	 * <br>
	 * A unique ID (what you want) that allows to identify the created <code>CommandsExecuter</code>.
	 * @throws JDSLException Si une erreur se produit.<br>
	 * <br>
	 * If an error occurates.
	 * @see JDSLException
	 */
	public static void execute(String dsl, String uniqueID) throws JDSLException {
		
		JDSL.out.println("running dsl " + dsl);
		
		try {
			
			new CommandsExecuter(dsl, uniqueID).execute();
			
		} catch (JDSLException e) {
			
			JDSL.out.println("runtime error :");
			e.printStackTrace();
			throw new JDSLException("runtime error", e);
			
		} catch (FileNotFoundException e) {
			
			JDSL.out.println("error : file not found");
			e.printStackTrace();
			throw new JDSLException("error : file not found", e);
			
		} catch (IOException e) {
			
			JDSL.out.println("input/output error");
			e.printStackTrace();
			throw new JDSLException("input/output error", e);
			
		}
		
	}
	
	/**
	 * Cette méthode supprime le contenu du thread correspondant à l'ID.<br>
	 * <br>
	 * This method deletes thead matching to given ID's content.
	 * @param threadID
	 */
	public static void deleteThreadContent(String threadID){
		
		JDSL.out.println("deleting thread " + threadID + "'s content");
		
		ExecutersList.removeExecuter(threadID);
		CommandsList.removeCMD(threadID);
		Properties.removeProps(threadID);
		VarList.removeVars(threadID);
		
	}
	
	/**
	 * @return Le PrintStream de JDSL.<br>
	 * <br>
	 * JDSL's print stream.
	 * @see out
	 */
	public static PrintStream getPrintStream() {return out;}
	
	/**
	 * @param out Le PrintStream de JDSL.<br>
	 * <br>
	 * JDSL's print stream.
	 * @see out
	 */
	public static void setPrintStream(PrintStream out) {JDSL.out = out;}
	
}
